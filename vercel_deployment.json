// vercel.json
{
  "version": 2,
  "builds": [
    {
      "src": "src/index.ts",
      "use": "@vercel/node"
    }
  ],
  "routes": [
    {
      "src": "/(.*)",
      "dest": "/src/index.ts"
    }
  ],
  "env": {
    "NODE_ENV": "production"
  },
  "functions": {
    "src/index.ts": {
      "maxDuration": 60
    }
  }
}

// package.json updates for Vercel
{
  "name": "google-services-mcp-server",
  "version": "0.1.0",
  "description": "MCP Server for Google Services on Vercel",
  "main": "src/index.ts",
  "type": "module",
  "scripts": {
    "build": "tsc",
    "start": "node dist/index.js",
    "dev": "tsc && node dist/index.js",
    "vercel-build": "npm run build"
  },
  "dependencies": {
    "@modelcontextprotocol/sdk": "^0.4.0",
    "googleapis": "^144.0.0",
    "google-auth-library": "^9.14.1",
    "express": "^4.18.2"
  },
  "devDependencies": {
    "@types/node": "^20.0.0",
    "@types/express": "^4.17.17",
    "typescript": "^5.0.0"
  }
}

// src/vercel-adapter.ts - Adapter for Vercel serverless functions
import { VercelRequest, VercelResponse } from '@vercel/node';
import { GoogleServicesMCPServer } from './mcp-server';

let mcpServer: GoogleServicesMCPServer | null = null;

export default async function handler(req: VercelRequest, res: VercelResponse) {
  // Set CORS headers for web access
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');

  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }

  // Health check endpoint
  if (req.url === '/health') {
    res.status(200).json({ status: 'ok', timestamp: new Date().toISOString() });
    return;
  }

  // MCP endpoint
  if (req.url === '/mcp' && req.method === 'POST') {
    try {
      // Initialize MCP server if not already done
      if (!mcpServer) {
        mcpServer = new GoogleServicesMCPServer();
      }

      // Handle MCP request
      const result = await mcpServer.handleRequest(req.body);
      res.status(200).json(result);
    } catch (error) {
      console.error('MCP Error:', error);
      res.status(500).json({ 
        error: 'Internal server error', 
        message: error instanceof Error ? error.message : 'Unknown error' 
      });
    }
    return;
  }

  // Default response with MCP server info
  res.status(200).json({
    name: 'Google Services MCP Server',
    version: '0.1.0',
    endpoints: {
      health: '/health',
      mcp: '/mcp (POST)'
    },
    tools: [
      'drive_create_folder', 'drive_list_files', 'drive_move_file', 'drive_delete_file',
      'sheets_create', 'sheets_read', 'sheets_write', 'sheets_append',
      'slides_create', 'slides_add_slide', 'slides_add_text', 'slides_add_image',
      'docs_create', 'docs_read', 'docs_write', 'docs_replace_text',
      'forms_create', 'forms_add_question', 'forms_get_responses', 'forms_get_form'
    ]
  });
}

// src/mcp-server.ts - Modified MCP server for HTTP requests
import { 
  CallToolRequestSchema,
  ListToolsRequestSchema,
  ErrorCode,
  McpError 
} from '@modelcontextprotocol/sdk/types.js';
import { google } from 'googleapis';
import { OAuth2Client } from 'google-auth-library';

const SCOPES = [
  'https://www.googleapis.com/auth/drive',
  'https://www.googleapis.com/auth/spreadsheets',
  'https://www.googleapis.com/auth/presentations',
  'https://www.googleapis.com/auth/documents',
  'https://www.googleapis.com/auth/forms',
];

export class GoogleServicesMCPServer {
  private oauth2Client: OAuth2Client;
  private drive: any;
  private sheets: any;
  private slides: any;
  private docs: any;
  private forms: any;

  constructor() {
    this.setupAuth();
  }

  private setupAuth() {
    this.oauth2Client = new OAuth2Client(
      process.env.GOOGLE_CLIENT_ID,
      process.env.GOOGLE_CLIENT_SECRET,
      process.env.GOOGLE_REDIRECT_URI || 'https://your-vercel-app.vercel.app/callback'
    );

    // Set credentials from environment
    if (process.env.GOOGLE_ACCESS_TOKEN) {
      this.oauth2Client.setCredentials({
        access_token: process.env.GOOGLE_ACCESS_TOKEN,
        refresh_token: process.env.GOOGLE_REFRESH_TOKEN,
      });
    }

    // Initialize Google APIs
    this.drive = google.drive({ version: 'v3', auth: this.oauth2Client });
    this.sheets = google.sheets({ version: 'v4', auth: this.oauth2Client });
    this.slides = google.slides({ version: 'v1', auth: this.oauth2Client });
    this.docs = google.docs({ version: 'v1', auth: this.oauth2Client });
    this.forms = google.forms({ version: 'v1', auth: this.oauth2Client });
  }

  async handleRequest(body: any) {
    const { method, params } = body;

    switch (method) {
      case 'tools/list':
        return this.listTools();
      
      case 'tools/call':
        return this.callTool(params);
      
      default:
        throw new McpError(ErrorCode.MethodNotFound, `Unknown method: ${method}`);
    }
  }

  private async listTools() {
    return {
      tools: [
        // Google Drive Tools
        {
          name: 'drive_create_folder',
          description: 'Create a new folder in Google Drive',
          inputSchema: {
            type: 'object',
            properties: {
              name: { type: 'string', description: 'Folder name' },
              parentId: { type: 'string', description: 'Parent folder ID (optional)' },
            },
            required: ['name'],
          },
        },
        {
          name: 'drive_list_files',
          description: 'List files in Google Drive',
          inputSchema: {
            type: 'object',
            properties: {
              query: { type: 'string', description: 'Search query (optional)' },
              maxResults: { type: 'number', description: 'Max results (default: 10)' },
              folderId: { type: 'string', description: 'Folder ID to search in (optional)' },
            },
          },
        },
        // ... (include all 20 tools from the original server)
      ],
    };
  }

  private async callTool(params: any) {
    const { name, arguments: args } = params;

    try {
      switch (name) {
        case 'drive_create_folder':
          return await this.createFolder(args);
        case 'drive_list_files':
          return await this.listFiles(args);
        // ... (include all tool implementations)
        
        default:
          throw new McpError(ErrorCode.MethodNotFound, `Unknown tool: ${name}`);
      }
    } catch (error) {
      throw new McpError(ErrorCode.InternalError, `Error executing ${name}: ${error.message}`);
    }
  }

  // Include all the Google API methods from the original server
  // (createFolder, listFiles, createSpreadsheet, etc.)
  
  private async createFolder(args: any) {
    const fileMetadata = {
      name: args.name,
      mimeType: 'application/vnd.google-apps.folder',
      parents: args.parentId ? [args.parentId] : undefined,
    };

    const response = await this.drive.files.create({
      resource: fileMetadata,
      fields: 'id, name, webViewLink',
    });

    return {
      content: [{
        type: 'text',
        text: JSON.stringify({
          id: response.data.id,
          name: response.data.name,
          webViewLink: response.data.webViewLink,
        }, null, 2),
      }],
    };
  }

  private async listFiles(args: any) {
    const query = args.folderId 
      ? `'${args.folderId}' in parents` 
      : args.query || '';

    const response = await this.drive.files.list({
      q: query,
      pageSize: args.maxResults || 10,
      fields: 'files(id, name, mimeType, webViewLink, createdTime, modifiedTime)',
    });

    return {
      content: [{
        type: 'text',
        text: JSON.stringify(response.data.files, null, 2),
      }],
    };
  }

  // Add all other methods (createSpreadsheet, createPresentation, etc.)
  // ... (copy from the original server implementation)
}

// .env.local (for local development)
GOOGLE_CLIENT_ID=your_google_client_id_here
GOOGLE_CLIENT_SECRET=your_google_client_secret_here
GOOGLE_REDIRECT_URI=https://your-vercel-app.vercel.app/callback
GOOGLE_ACCESS_TOKEN=your_access_token_here
GOOGLE_REFRESH_TOKEN=your_refresh_token_here

// Deployment instructions in README.md
# Vercel Deployment Instructions

## 1. Setup Project
```bash
npm install -g vercel
git init
git add .
git commit -m "Initial commit"
```

## 2. Configure Environment Variables
In Vercel dashboard or via CLI:
```bash
vercel env add GOOGLE_CLIENT_ID
vercel env add GOOGLE_CLIENT_SECRET  
vercel env add GOOGLE_ACCESS_TOKEN
vercel env add GOOGLE_REFRESH_TOKEN
```

## 3. Deploy
```bash
vercel --prod
```

## 4. Using with AgenticFlow
- MCP Server URL: `https://your-app.vercel.app/mcp`
- Method: HTTP POST
- All 20 Google tools available

## 5. Using with Claude Desktop
Add to Claude Desktop config:
```json
{
  "mcpServers": {
    "google-services": {
      "command": "curl",
      "args": [
        "-X", "POST",
        "-H", "Content-Type: application/json",
        "https://your-app.vercel.app/mcp"
      ]
    }
  }
}
```